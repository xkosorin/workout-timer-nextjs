// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  workouts      Workout[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Workout {
  id          String   @id @default(cuid())
  userId      String
  title       String   @unique
  description String?
  updatedAt   DateTime @updatedAt

  laps Lap[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Lap {
  id            String   @id @default(cuid())
  workoutId     String
  exerciseCount Int
  updatedAt     DateTime @updatedAt

  exercises LapOnUsedExercise[]
  
  workout Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)
}

model Exercise {
  id           String   @id @default(cuid())
  title        String   @unique
  description  String?
  mediaURL     String?
  mediaIsImage Boolean  @default(false)
  updatedAt    DateTime @updatedAt

  usedExercise UsedExercise[]
}

model UsedExercise {
  id         String   @id @default(cuid())
  exerciseId String
  timed      Boolean
  amount     Int
  updatedAt  DateTime @updatedAt

  laps LapOnUsedExercise[]

  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}

model LapOnUsedExercise {
  lapId          String
  usedExerciseId String
  updatedAt      DateTime @updatedAt
  
  lap          Lap          @relation(fields: [lapId], references: [id], onDelete: Cascade)
  usedExercise UsedExercise @relation(fields: [usedExerciseId], references: [id], onDelete: Cascade)

  @@id([lapId, usedExerciseId])
}
